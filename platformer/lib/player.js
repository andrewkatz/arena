// Generated by CoffeeScript 1.6.3
(function() {
  window.Player = cc.Node.extend({
    _cache: null,
    _windowBounds: {},
    _sprite: null,
    _stillFrame: null,
    _moveAction: null,
    _moveActionRunning: false,
    _keys: {},
    _currentDirection: "",
    _movementSpeed: 3,
    init: function() {
      var spriteSize, winSize;
      this._super();
      this._cache = cc.SpriteFrameCache.getInstance();
      this._initSprite();
      this._initActions();
      winSize = cc.Director.getInstance().getWinSize();
      spriteSize = this._sprite.getContentSize();
      this._windowBounds["U"] = winSize.height - (spriteSize.height / 2);
      this._windowBounds["D"] = spriteSize.height / 2;
      this._windowBounds["L"] = spriteSize.width / 2;
      return this._windowBounds["R"] = winSize.width - (spriteSize.width / 2);
    },
    _initSprite: function() {
      this._cache.addSpriteFrames(s_ugonoth_plist, s_ugonoth);
      this._stillFrame = this._cache.getSpriteFrame("ugonoth-move-1.png");
      this._sprite = cc.Sprite.createWithSpriteFrame(this._stillFrame);
      return this.addChild(this._sprite);
    },
    _initActions: function() {
      var frames, i, moveAnimation;
      frames = (function() {
        var _i, _results;
        _results = [];
        for (i = _i = 1; _i <= 16; i = ++_i) {
          _results.push(this._cache.getSpriteFrame("ugonoth-move-" + i + ".png"));
        }
        return _results;
      }).call(this);
      moveAnimation = cc.Animation.create(frames, 0.05);
      return this._moveAction = cc.RepeatForever.create(cc.Animate.create(moveAnimation));
    },
    onKeyUp: function(e) {
      return this._keys[e] = false;
    },
    onKeyDown: function(e) {
      return this._keys[e] = true;
    },
    update: function() {
      this._updateDirection();
      this._updateSprite();
      return this._updatePosition();
    },
    _updateDirection: function() {
      var horizontalDirection, newDirection, verticalDirection;
      if (this._keys[cc.KEY.w] || this._keys[cc.KEY.up]) {
        verticalDirection = "U";
      } else if (this._keys[cc.KEY.s] || this._keys[cc.KEY.down]) {
        verticalDirection = "D";
      } else {
        verticalDirection = "";
      }
      if (this._keys[cc.KEY.a] || this._keys[cc.KEY.left]) {
        horizontalDirection = "L";
      } else if (this._keys[cc.KEY.d] || this._keys[cc.KEY.right]) {
        horizontalDirection = "R";
      } else {
        horizontalDirection = "";
      }
      newDirection = verticalDirection + horizontalDirection;
      if (newDirection === "") {
        if (this._moveActionRunning) {
          this._sprite.stopAction(this._moveAction);
          this._sprite.setDisplayFrame(this._stillFrame);
          return this._moveActionRunning = false;
        }
      } else {
        this._currentDirection = newDirection;
        if (!this._moveActionRunning) {
          this._sprite.runAction(this._moveAction);
          return this._moveActionRunning = true;
        }
      }
    },
    _updateSprite: function() {
      return this._sprite.setRotation(this._rotationForDirection());
    },
    _updatePosition: function() {
      var position;
      if (!this._moveActionRunning) {
        return;
      }
      position = this.getPosition();
      if (this._currentDirection.indexOf("U") > -1 && position.y < this._windowBounds["U"]) {
        position.y += this._movementSpeed;
      } else if (this._currentDirection.indexOf("D") > -1 && position.y > this._windowBounds["D"]) {
        position.y -= this._movementSpeed;
      }
      if (this._currentDirection.indexOf("L") > -1 && position.x > this._windowBounds["L"]) {
        position.x -= this._movementSpeed;
      } else if (this._currentDirection.indexOf("R") > -1 && position.x < this._windowBounds["R"]) {
        position.x += this._movementSpeed;
      }
      return this.setPosition(position);
    },
    _rotationForDirection: function() {
      switch (this._currentDirection) {
        case "U":
          return 0.0;
        case "D":
          return 180.0;
        case "L":
          return -90.0;
        case "R":
          return 90.0;
        case "UL":
          return -45.0;
        case "UR":
          return 45.0;
        case "DL":
          return -135.0;
        case "DR":
          return 135.0;
        default:
          return 0.0;
      }
    }
  });

  window.Player.create = function() {
    var player;
    player = new Player();
    player.init();
    return player;
  };

}).call(this);
